import { Complaint, ComplaintStatus, ComplaintCategory } from '@/types';

const TELEGRAM_BOT_TOKEN = import.meta.env.VITE_TELEGRAM_BOT_TOKEN;
const TELEGRAM_CHAT_ID = import.meta.env.VITE_TELEGRAM_CHAT_ID;
const TELEGRAM_API_URL = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}`;

const getStatusText = (status: ComplaintStatus): string => {
  const statusMap: Record<ComplaintStatus, string> = {
    new: '–ù–æ–≤–∞—è',
    processing: '–í –æ–±—Ä–∞–±–æ—Ç–∫–µ',
    resolved: '–†–µ—à–µ–Ω–∞',
    rejected: '–û—Ç–∫–ª–æ–Ω–µ–Ω–∞'
  };
  return statusMap[status];
};

const getCategoryText = (category: ComplaintCategory): string => {
  const categoryMap: Record<ComplaintCategory, string> = {
    stadium: '–°—Ç–∞–¥–∏–æ–Ω',
    team: '–ö–æ–º–∞–Ω–¥–∞',
    tickets: '–ë–∏–ª–µ—Ç—ã',
    merchandise: '–ú–µ—Ä—á',
    other: '–î—Ä—É–≥–æ–µ'
  };
  return categoryMap[category];
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
const isAdmin = () => {
  return localStorage.getItem('isAdmin') === 'true';
};

const formatComplaintMessage = (complaint: Complaint) => {
  const statusEmoji = {
    new: 'üÜï',
    processing: 'üîÑ',
    resolved: '‚úÖ',
    rejected: '‚ùå'
  }[complaint.status];

  return `
<b>${statusEmoji} –ù–æ–≤–∞—è –∂–∞–ª–æ–±–∞ #${complaint.id}</b>

<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> ${getCategoryText(complaint.category)}
<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> ${complaint.description}
<b>–õ–æ–∫–∞—Ü–∏—è:</b> ${complaint.location}
<b>–°—Ç–∞—Ç—É—Å:</b> ${getStatusText(complaint.status)}
<b>–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:</b> ${new Date(complaint.created_at).toLocaleString()}
${complaint.contact_email ? `<b>Email:</b> ${complaint.contact_email}` : ''}
${complaint.contact_phone ? `<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${complaint.contact_phone}` : ''}
${complaint.attachments?.length ? `\n<b>–í–ª–æ–∂–µ–Ω–∏—è:</b> ${complaint.attachments.length}` : ''}
  `.trim();
};

const formatStatusUpdateMessage = (complaint: Complaint) => {
  const statusEmoji = {
    new: 'üÜï',
    processing: 'üîÑ',
    resolved: '‚úÖ',
    rejected: '‚ùå'
  }[complaint.status];

  return `
<b>${statusEmoji} –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∂–∞–ª–æ–±—ã #${complaint.id}</b>

<b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> ${getCategoryText(complaint.category)}
<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> ${complaint.description}
<b>–õ–æ–∫–∞—Ü–∏—è:</b> ${complaint.location}
<b>–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:</b> ${getStatusText(complaint.status)}
<b>–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:</b> ${new Date(complaint.updated_at).toLocaleString()}
${complaint.response ? `\n<b>–û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b>\n${complaint.response.text}\n\n<b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:</b> ${complaint.response.adminName || '–ù–µ —É–∫–∞–∑–∞–Ω'}` : ''}
  `.trim();
};

const sendPhotoToTelegram = async (photoUrl: string, caption: string) => {
  try {
    const response = await fetch(`${TELEGRAM_API_URL}/sendPhoto`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        chat_id: TELEGRAM_CHAT_ID,
        photo: photoUrl,
        caption: caption,
        parse_mode: 'HTML',
      }),
    });

    if (!response.ok) {
      throw new Error('Failed to send photo to Telegram');
    }

    return true;
  } catch (error) {
    console.error('Error sending photo to Telegram:', error);
    return false;
  }
};

export const sendTelegramNotification = async (complaint: Complaint) => {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
  if (!isAdmin()) {
    console.log('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º');
    return false;
  }

  try {
    const message = formatComplaintMessage(complaint);
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ –∫–∞–∫ —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é
    if (complaint.attachments?.length) {
      const firstImage = complaint.attachments.find(a => a.type === 'image');
      if (firstImage) {
        await sendPhotoToTelegram(firstImage.url, message);
        return true;
      }
    }

    // –ï—Å–ª–∏ –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    const response = await fetch(`${TELEGRAM_API_URL}/sendMessage`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        chat_id: TELEGRAM_CHAT_ID,
        text: message,
        parse_mode: 'HTML',
      }),
    });

    if (!response.ok) {
      throw new Error('Failed to send Telegram notification');
    }

    return true;
  } catch (error) {
    console.error('Error sending Telegram notification:', error);
    return false;
  }
};

export const sendStatusUpdateNotification = async (complaint: Complaint) => {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
  if (!isAdmin()) {
    console.log('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º');
    return false;
  }

  try {
    const message = formatStatusUpdateMessage(complaint);
    
    const response = await fetch(`${TELEGRAM_API_URL}/sendMessage`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        chat_id: TELEGRAM_CHAT_ID,
        text: message,
        parse_mode: 'HTML',
      }),
    });

    if (!response.ok) {
      throw new Error('Failed to send Telegram notification');
    }

    return true;
  } catch (error) {
    console.error('Error sending Telegram notification:', error);
    return false;
  }
};

export const testTelegramNotification = async () => {
  try {
    const testMessage = `
<b>üß™ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</b>

–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: ${new Date().toLocaleString('ru-RU')}
    `;

    const response = await fetch(`${TELEGRAM_API_URL}/sendMessage`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        chat_id: TELEGRAM_CHAT_ID,
        text: testMessage,
        parse_mode: 'HTML',
      }),
    });

    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(`Failed to send Telegram notification: ${JSON.stringify(errorData)}`);
    }

    return true;
  } catch (error) {
    console.error('Error sending test Telegram notification:', error);
    return false;
  }
}; 